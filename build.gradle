buildscript {
    apply from: file('versions.gradle')

    dependencies {
        classpath libraries.gradleRelease
    }
}

plugins {
    id "java-gradle-plugin"
    id "com.jfrog.artifactory" version "4.4.9"
}

apply plugin: "idea"
apply plugin: "groovy"
apply plugin: 'signing'
apply plugin: "maven-publish"
apply plugin: "maven"
apply plugin: 'net.researchgate.release'

group = "com.github.afbjorklund.gradle.caching.memcached"
description = "A simple settings plugin that enables build caching in Gradle with memcached as the backend"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

gradlePlugin {
    plugins {
        memcachedPlugin {
            id = "com.github.afbjorklund.gradle.caching.memcached"
            implementationClass = "com.github.afbjorklund.gradle.caching.memcached.MemcachedPlugin"
        }
    }
}

def localRepo = file("$buildDir/repo")

publishing {
    publications {
        jar(MavenPublication) {
            from components.java
        }
    }
}

repositories {
    mavenCentral()
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    compile libraries.spymemcached
    testCompile libraries.junit
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4@jar"
    testCompile libraries.spymemcached
    testRuntime files(createClasspathManifest)
}

// --- Configure publications ------------------------------------------

def buildTagFor(String version) {
    switch (version.substring(version.lastIndexOf("-") + 1)) {
        case "SNAPSHOT":
            return "snapshot"
        case ~/M\d+[a-z]*$/:
            return "milestone"
        default:
            return "release"
    }
}

def targetRepoKey = "libs-${buildTagFor(project.version)}s-local"

artifactory {
    contextUrl = "https://repo.gradle.org/gradle"
    publish {
        repository {
            repoKey = targetRepoKey
            username = project.findProperty("artifactory_user") ?: "nouser"
            password = project.findProperty("artifactory_password") ?: "nopass"
            maven = true
        }
        defaults {
            publications("jar")
        }
    }
    resolve {
        repoKey = "repo"
    }
}

ext.sonatypeUsername = hasProperty("ossrhUsername") ? ossrhUsername : System.getenv("ossrhUsername")

ext.sonatypePassword = hasProperty("ossrhPassword") ? ossrhPassword : System.getenv("ossrhPassword")

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'Gradle memcached Plugin'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A simple settings plugin that enables build caching in Gradle with a memcached node as the backend'
                url 'https://github.com/afbjorklund/gradle-memcached-plugin'

                scm {
                    connection 'scm:git:git@github.com:afbjorklund/gradle-memcached-plugin.git'
                    developerConnection 'scm:git:git@github.com:afbjorklund/gradle-memcached-plugin.git'
                    url 'https://github.com/afbjorklund/gradle-memcached-plugin'
                }

                licenses {
                    license {
                        name 'Apache License, Version 2.0, January 2004'
                        url 'https://www.apache.org/licenses/LICENSE-2.0.html'
                    }
                }

                developers {
                    developer {
                        id 'afbjorklund'
                        name 'Anders F Bj√∂rklund'
                        email 'anders.f.bjorklund@gmail.com'
                    }
                }
            }
        }
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion }
    sign configurations.archives
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

afterReleaseBuild.dependsOn uploadArchives
